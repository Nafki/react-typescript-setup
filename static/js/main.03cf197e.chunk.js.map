{"version":3,"sources":["Component/HomeDisplay.tsx","Component/HomeIndex.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HomeDisplay","props","console","log","mainWeather","temp","temp_max","temp_min","feels_like","humidity","pressure","className","src","imageUrl","alt","width","height","HomeIndex","weatherData","pos","crd","coords","fetch","longitude","latitude","then","response","ok","Error","json","data","setState","url","catch","error","message","main","state","navigator","geolocation","getCurrentPosition","this","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAwDeA,EAnCM,SAACC,GAClBC,QAAQC,IAAI,MAAOF,EAAMG,YAAYC,MACrC,MAA+DJ,EAAMG,YAA9DC,EAAP,EAAOA,KAAKC,EAAZ,EAAYA,SAASC,EAArB,EAAqBA,SAASC,EAA9B,EAA8BA,WAAWC,EAAzC,EAAyCA,SAAUC,EAAnD,EAAmDA,SAEnD,OACI,eAAC,YAAD,CAAWC,UAAU,WAArB,UACQ,qBAAKC,IAAKX,EAAMY,SAAUC,IAAI,aAAaC,MAAM,MAAMC,OAAO,QAC9D,eAAC,MAAD,WACI,eAAC,MAAD,WACA,2CAAkBX,KAElB,eAAC,MAAD,WACA,wCAAeC,KAEf,eAAC,MAAD,WACA,wCAAeC,QAInB,eAAC,MAAD,WACA,eAAC,MAAD,WACI,8CAAqBC,KAErB,eAAC,MAAD,WACA,yCAAgBC,KAGhB,eAAC,MAAD,WACA,yCAAgBC,YClCfO,E,kDACjB,WAAYhB,GAAY,IAAD,8BACvB,cAAMA,IAgBNiB,YAAc,SAACC,GACX,IAAIC,EAAMD,EAAIE,OACdC,MAAM,mDAAD,OAAoDF,EAAIG,UAAxD,gBAAyEH,EAAII,SAA7E,sEACJC,MAAK,SAACC,GACJ,IAAIA,EAASC,GACZ,MAAMC,MAAM,yBAEZ,OAAOF,EAASG,UAEnBJ,MAAK,SAACK,GACH5B,QAAQC,IAAI,OAAQ2B,GACpB,EAAKC,SAAS,CAAClB,SAAUiB,EAAKE,SAE/BC,OAAM,SAAAC,GACL,MAAMN,MAAMM,EAAMC,YAGtBb,MAAM,uDAAD,OAAwDF,EAAII,SAA5D,gBAA4EJ,EAAIG,UAAhF,2DACJE,MAAK,SAACC,GACH,IAAIA,EAASC,GACZ,MAAMC,MAAM,0BAEZ,OAAOF,EAASG,UAEnBJ,MAAK,SAACK,GACH5B,QAAQC,IAAI,QAAS2B,GACrB,EAAKC,SAAS,CAAC3B,YAAa0B,EAAKM,UAEpCH,OAAM,SAAAC,GACH,MAAMN,MAAMM,EAAMC,aA5C3B,EAAKE,MAAQ,CACTxB,SAAU,GACVT,YAAa,CACTI,WAAY,EACZC,SAAU,EACVC,SAAU,EACVL,KAAM,EACNC,SAAU,EACVC,SAAU,IAVK,E,qDAcvB,WACqB+B,UAAUC,YAAYC,mBAAmBC,KAAKvB,e,oBAmCnE,WAGI,OAFAhB,QAAQC,IAAI,OAAQsC,KAAKJ,MAAMxB,UAC/BX,QAAQC,IAAI,UAAWsC,KAAKJ,MAAMjC,aAElC,oCACI,oBAAIO,UAAU,aAAd,yCAEF,cAAC,EAAD,CAAaE,SAAU4B,KAAKJ,MAAMxB,SAElCT,YAAaqC,KAAKJ,MAAMjC,qB,GA5DKsC,aCHxBC,MARf,WACE,OACE,qBAAKhC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSiC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.03cf197e.chunk.js","sourcesContent":[" import { readdirSync } from 'fs';\r\nimport React from 'react';\r\nimport { Container, Row, Col} from 'react-grid-system';\r\n\r\n //import HomeIndex from './HomeIndex';\r\n\r\n type weather = {\r\n    feels_like: number\r\n    humidity: number\r\n    pressure: number\r\n    temp: number\r\n    temp_max: number\r\n    temp_min: number\r\n    }\r\n \r\n type PropType = {\r\n    imageUrl: string,\r\n    mainWeather: weather\r\n    \r\n}\r\n\r\n const HomeDisplay = (props: PropType) => {\r\n    console.log('pro', props.mainWeather.temp)\r\n    const {temp,temp_max,temp_min,feels_like,humidity, pressure} = props.mainWeather\r\n\r\n    return(\r\n        <Container className=\"App-body\" >\r\n                <img src={props.imageUrl} alt=\"nasaimages\" width=\"300\" height=\"200\"/> \r\n                <Row >\r\n                    <Col>\r\n                    <p>Temprature</p>{temp}\r\n                    </Col>\r\n                    <Col>\r\n                    <p>Maximun</p>{temp_max}\r\n                    </Col>\r\n                    <Col>\r\n                    <p>Minimum</p>{temp_min}\r\n                    </Col>\r\n                </Row>\r\n               \r\n                <Row>\r\n                <Col>\r\n                    <p>It Feels Like</p>{feels_like}\r\n                    </Col>\r\n                    <Col >\r\n                    <p>Humidity</p>{humidity}\r\n                    </Col>\r\n\r\n                    <Col >\r\n                    <p>Pressure</p>{pressure}\r\n                    </Col>\r\n                    </Row>\r\n    </Container>\r\n\r\n    )\r\n}\r\nexport default HomeDisplay\r\n","import React, { Component} from 'react';\r\nimport HomeDisplay from './HomeDisplay';\r\n\r\ntype weather = {\r\nfeels_like: number,\r\nhumidity: number,\r\npressure: number,\r\ntemp: number,\r\ntemp_max: number,\r\ntemp_min: number\r\n}\r\ntype StateType = {\r\n    imageUrl: string,\r\n    mainWeather: weather\r\n}\r\nexport default class HomeIndex extends Component<{}, StateType> {\r\n    constructor(props: any){\r\n    super(props)\r\n    this.state = {\r\n        imageUrl: '',\r\n        mainWeather: {\r\n            feels_like: 0,\r\n            humidity: 0,\r\n            pressure: 0,\r\n            temp: 0,\r\n            temp_max: 0,\r\n            temp_min: 0\r\n        }\r\n    }\r\n    }\r\n    componentDidMount(){\r\n        const location = navigator.geolocation.getCurrentPosition(this.weatherData)\r\n    }\r\n    weatherData = (pos: any) => {\r\n        let crd = pos.coords;\r\n        fetch(`https://api.nasa.gov/planetary/earth/assets?lon=${crd.longitude}&lat=${crd.latitude}&date=2014-02-01&api_key=79HsecS8LBbHbGgRLuQRPxAUlY6cp5cQPItLZ4Np`)\r\n        .then((response)=>{\r\n           if(!response.ok){\r\n            throw Error(\"error fetching images\")\r\n           }\r\n            return response.json()\r\n        })\r\n        .then((data)=>{\r\n            console.log(\"Data\", data)\r\n            this.setState({imageUrl: data.url})\r\n\r\n        }).catch(error=>{\r\n            throw Error(error.message)\r\n        })\r\n\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${crd.latitude}&lon=${crd.longitude}&appid=79161887469fcc530c9dfbad7392edb7&units=imperial`)\r\n        .then((response)=>{\r\n            if(!response.ok){\r\n             throw Error(\"error fetching weather\")\r\n            }\r\n             return response.json()\r\n         })\r\n         .then((data)=>{\r\n             console.log(\"Data2\", data)\r\n             this.setState({mainWeather: data.main})\r\n         })\r\n         .catch(error=>{\r\n             throw Error(error.message)\r\n         })\r\n    }\r\n    \r\n    render(){\r\n        console.log('NASA', this.state.imageUrl)\r\n        console.log('wearher', this.state.mainWeather)\r\n        return (\r\n        <section >\r\n            <h2 className=\"App-header\" >Main Weather and Nasa Image</h2>\r\n          \r\n          <HomeDisplay imageUrl={this.state.imageUrl}\r\n        \r\n          mainWeather={this.state.mainWeather}/>\r\n        \r\n        </section>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HomeIndex from './Component/HomeIndex';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomeIndex />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}